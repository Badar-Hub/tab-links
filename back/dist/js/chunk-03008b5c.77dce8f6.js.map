{"version":3,"sources":["webpack:///./src/domain/accounts/AccountsService.ts","webpack:///./src/domain/products/ProductService.ts","webpack:///./src/domain/accounts/invoices/newInvoice.vue","webpack:///./src/domain/accounts/invoices/InvoiceProduct.vue","webpack:///./src/domain/accounts/invoices/InvoiceProduct.vue?e093","webpack:///./src/domain/accounts/invoices/InvoiceProduct.vue?9b2d","webpack:///./src/domain/accounts/invoices/newInvoice.vue?24bf","webpack:///./src/domain/accounts/invoices/newInvoice.vue?6855","webpack:///./src/domain/customers/CustomerService.ts"],"names":["AccountsService","get","baseUrl","data","results","console","log","name","filteredInvoice","paymentReceving","post","invoice","put","_id","ProductService","product","class","onSubmit","newInvoice","customerName","label","options","customerList","filled","disable","invoiceNo","date","mask","rules","append","ref","transition-show","transition-hide","color","flat","reference","products","index","key","addAnotherProduct","isTotalValue","totalValue","calculateTotal","type","inputValue","removeProduct","productsList","$emit","quantity","productData","discount","props","Object","setup","context","sku","brand","category","price","costPrice","set","val","emit","value","find","getProducts","map","render","QCard","QCardSection","QSelect","QInput","components","InvoiceProduct","totalValueArr","forEach","prod","productFind","push","reduce","a","b","filter","i","generateInvoiceNo","getInvoices","length","resetForm","CustomerService","getCustomers","customers","customer","QForm","QIcon","QPopupProxy","QDate","QBtn","ClosePopup","id"],"mappings":"8NAIqBA,E,kKAGnB,6HAEuB,OAAWC,IAAX,UACdD,EAAgBE,QADF,kBAFvB,cAEUC,EAFV,yBAKWA,EAAKC,QAAQD,MALxB,mCAOIE,QAAQC,IAAR,MAPJ,yD,0IAWA,WAAwBC,GAAxB,gHAEuB,OAAWN,IAAX,UACdD,EAAgBE,QADF,qBACsBK,IAH7C,cAEUJ,EAFV,yBAKWA,EAAKC,QAAQD,KAAKK,iBAL7B,mCAOIH,QAAQC,IAAR,MAPJ,yD,4IAWA,6HAEuB,OAAWL,IAAX,UACdD,EAAgBE,QADF,cAFvB,cAEUC,EAFV,yBAKWA,EAAKC,QAAQD,MALxB,mCAOIE,QAAQC,IAAR,MAPJ,yD,kJAWA,WAAgCG,GAAhC,gHAEuB,OAAWC,KAAX,UACdV,EAAgBE,SACnBO,GAJN,cAEUN,EAFV,yBAMWA,EAAKA,MANhB,mCAQIE,QAAQC,IAAR,MARJ,yD,2IAYA,WAAwBK,GAAxB,gHAEuB,OAAWD,KAAX,UAAmBV,EAAgBE,QAAnC,mBAA6DS,GAFpF,cAEUR,EAFV,yBAGWA,EAAKA,MAHhB,mCAKIE,QAAQC,IAAR,MALJ,yD,4IASA,WAAyBG,GAAzB,gHAEuB,OAAWG,IAAX,UACdZ,EAAgBE,QADF,YACaO,EAAgBI,KAC9CJ,GAJN,cAEUN,EAFV,yBAMWA,EAAKA,MANhB,mCAQIE,QAAQC,IAAR,MARJ,yD,iEAxDO,EAAAJ,QAAU,Y,gJCFEY,E,+JAEnB,6HAEuB,OAAWb,IAAIa,EAAeZ,SAFrD,cAEUC,EAFV,yBAGWA,EAAKC,QAAQD,MAHxB,mCAKIE,QAAQC,IAAR,MALJ,yD,2IASA,WAAyBS,GAAzB,gHAEuB,OAAWL,KAAX,UAAmBI,EAAeZ,SAAWa,GAFpE,cAEUZ,EAFV,yBAGWA,EAAKA,MAHhB,mCAKIE,QAAQC,IAAR,MALJ,yD,8IASA,WAA2BS,GAA3B,gHAEuB,OAAWH,IAAX,UACdE,EAAeZ,QADD,YACYa,EAAQF,KACrCE,GAJN,cAEUZ,EAFV,yBAMWA,EAAKA,MANhB,mCAQIE,QAAQC,IAAR,MARJ,yD,iEAnBO,EAAAJ,QAAU,Y,6DCFf,eAIM,OAJDc,MAAM,eAAa,CACtB,eAEM,OAFDA,MAAM,sBAAoB,CAC7B,eAAoC,MAAhCA,MAAM,WAAU,mB,MAIjBA,MAAM,0C,GAQNA,MAAM,0C,GAQNA,MAAM,0C,GAUMA,MAAM,gC,GASlBA,MAAM,0C,GAGNA,MAAM,iC,GASNA,MAAM,qB,SAGcA,MAAM,wC,GACzBA,MAAM,W,GAEPA,MAAM,wC,GAONA,MAAM,gC,6TAnEf,eAuEM,YAtEJ,EAKA,eAgES,GAhEDA,MAAM,iBAAkB,SAAQ,EAAAC,U,yBACtC,iBAOM,CAPN,eAOM,MAPN,EAOM,CANJ,eAKE,G,WAJS,EAAAC,WAAWC,a,qDAAX,EAAAD,WAAWC,aAAY,IAChCC,MAAM,kBACLC,QAAS,EAAAC,aACVC,OAAA,I,mCAGJ,eAOM,MAPN,EAOM,CANJ,eAKE,GAJAC,QAAA,G,WACS,EAAAN,WAAWO,U,qDAAX,EAAAP,WAAWO,UAAS,IAC7BL,MAAM,iBACNG,OAAA,I,yBAGJ,eAkBM,MAlBN,EAkBM,CAjBJ,eAgBU,GAhBDA,OAAA,G,WAAgB,EAAAL,WAAWQ,K,qDAAX,EAAAR,WAAWQ,KAAI,IAAEC,KAAK,OAAQC,MAAO,CAAC,S,CAC5CC,OAAM,gBACrB,iBAYS,CAZT,eAYS,GAZDtB,KAAK,QAAQS,MAAM,kB,yBACzB,iBAUgB,CAVhB,eAUgB,GATdc,IAAI,aACJC,kBAAgB,QAChBC,kBAAgB,S,yBAEhB,iBAIS,CAJT,eAIS,G,WAJQ,EAAAd,WAAWQ,K,qDAAX,EAAAR,WAAWQ,KAAI,K,yBAC9B,iBAEM,CAFN,eAEM,MAFN,EAEM,C,eADJ,eAA0D,GAArCN,MAAM,QAAQa,MAAM,UAAUC,KAAA,I,mGAQjE,eAEM,MAFN,EAEM,CADJ,eAAmE,G,WAAjD,EAAAhB,WAAWiB,U,qDAAX,EAAAjB,WAAWiB,UAAS,IAAEf,MAAM,YAAYG,OAAA,I,yBAE5D,eAQM,MARN,EAQM,E,mBAPJ,eAMM,2BAJuB,EAAAL,WAAWkB,UAAQ,SAAtCrB,EAASsB,G,wBAFnB,eAMM,OALJrB,MAAM,UAELsB,IAAKD,G,CAEN,eAAqC,GAApB1B,QAASI,GAAO,yB,QAGrC,eAEM,MAFN,EAEM,CADJ,eAAgE,GAAzDK,MAAM,sBAAuB,QAAO,EAAAmB,mB,sBAElC,EAAAC,c,iBAAX,eAEM,MAFN,EAEM,CADJ,eAAwD,KAAxD,EAAoB,OAAI,eAAG,EAAAtB,WAAWuB,YAAU,M,sBAElD,eAMM,MANN,EAMM,CALJ,eAIE,GAHC,QAAO,EAAAC,eACRtB,MAAM,wBACNa,MAAM,W,sBAGV,eAEM,MAFN,EAEM,CADJ,eAA8D,GAAvDb,MAAM,iBAAiBa,MAAM,UAAUU,KAAK,iB,gICjE9C3B,MAAM,kB,GACJA,MAAM,sB,GACNA,MAAM,c,GAQNA,MAAM,iC,GAMRA,MAAM,kB,GACJA,MAAM,sC,GAQNA,MAAM,sC,GAQNA,MAAM,gD,iBAA+C,c,GAErDA,MAAM,a,GAQNA,MAAM,sC,2KA9CnB,eAyDM,YAxDJ,eAuDS,GAvDDA,MAAM,WAAS,C,wBACrB,iBAqDiB,CArDjB,eAqDiB,Q,wBApDf,iBAeM,CAfN,eAeM,MAfN,EAeM,CAdJ,eAQM,MARN,EAQM,CAPJ,eAMI,IANJ,EAMI,eAJA,EAAA4B,WAAWrC,KAAX,4BAAyD,aAAW,M,uBAM1E,eAIM,MAJN,EAIM,CAHJ,eAEI,KAFDS,MAAM,4BAA6B,QAAK,+BAAE,EAAA6B,cAAc,EAAAR,UAAQ,WAKvE,eAmCM,MAnCN,EAmCM,CAlCJ,eAOM,MAPN,EAOM,CANJ,eAKE,GAJAjB,MAAM,iB,WACG,EAAAwB,WAAWrC,K,qDAAX,EAAAqC,WAAWrC,KAAI,IACvBc,QAAS,EAAAyB,aACT,kBAAa,+BAAE,EAAAC,MAAK,QAAU,EAAApC,Y,mCAGnC,eAOM,MAPN,EAOM,CANJ,eAKE,GAJAgC,KAAK,SACLvB,MAAM,W,WACU,EAAAwB,WAAWI,S,qDAAX,EAAAJ,WAAWI,SAAQ,I,eAAnC,YACC,QAAK,+BAAE,EAAAD,MAAK,QAAU,EAAApC,Y,yBAG3B,eASM,MATN,EASM,C,EAPJ,eAMI,IANJ,EAMI,eAJA,EAAAsC,YAAYC,SAA6B,cAAY,SAAW,aAAW,SAA6B,cAAY,MAAQ,aAAW,UAAQ,KAMrJ,eAOM,MAPN,EAOM,CANJ,eAKE,GAJA1B,QAAA,GACAmB,KAAK,SACLvB,MAAM,W,WACU,EAAA6B,YAAYC,S,qDAAZ,EAAAD,YAAYC,SAAQ,I,eAApC,a,iDCtCC,qBAAgB,CAC7BC,MAAO,CACLxC,QAAS,CACPgC,KAAMS,SAGVC,MAN6B,SAMvBF,EAAOG,GACX,IAAMlB,EAAW,eAAoB,IAC/BU,EAAe,eAAmB,IAClCG,EAAc,eAAS,CAC3BM,IAAK,GACLhD,KAAM,GACNiD,MAAO,GACPC,SAAU,GACVC,MAAO,EACPR,SAAU,EACVS,UAAW,EACXX,SAAU,IAGNJ,EAAa,eAAS,CAC1B3C,IAAK,kBAAMkD,EAAMxC,SACjBiD,IAAK,SAACC,GAAD,OAASP,EAAQQ,KAAK,oBAAqBD,MAqBlD,OAlBA,gBACE,kBAAMjB,EAAWmB,MAAOxD,QACxB,kBACG0C,EAAYc,MAAQ3B,EAAS2B,MAAMC,MAClC,SAACjD,GAAD,OAA8BA,EAAQR,OAASqC,EAAWmB,MAAOxD,WAIvE,eAAS,wCAAC,uHAEiBO,EAAA,KAAemD,cAFhC,OAEN7B,EAAS2B,MAFH,OAGNjB,EAAaiB,MAAQ3B,EAAS2B,MAAMG,KAAI,SAACnD,GAAD,OAAaA,EAAQR,QAC7DF,QAAQC,IAAIwC,EAAaiB,OAJnB,mDAMN1D,QAAQC,IAAR,MANM,0DAUH,CACL2C,cACAH,eACAF,iB,qECzDN,EAAOuB,OAAS,EAED,QAMf,IAAS,EAAQ,aAAc,CAACC,QAAA,KAAMC,eAAA,KAAaC,UAAA,KAAQC,SAAA,O,gBCD5C,iBAAgB,CAC7BC,WAAY,CAAEC,kBACdpB,MAF6B,WAG3B,IAAMnC,EAAa,eAAqB,CACtCC,aAAc,GACdM,UAAW,EACXC,KAAM,aACNS,UAAW,GACXC,SAAU,CACR,CACE7B,KAAM,GACNyC,SAAU,IAGdP,WAAY,IAERA,EAAa,eAAI,GACjBK,EAAe,eAAmB,IAClCV,EAAW,eAAoB,IAC/Bd,EAAe,eAAI,IACnBoD,EAAgB,eAAmB,IACnClC,EAAe,gBAAI,GAEnBE,EAAiB,WACrBF,EAAauB,OAAQ,EACrB7C,EAAW6C,MAAMtB,WAAa,EAC9BiC,EAAcX,MAAQ,GACtB7C,EAAW6C,MAAM3B,SAASuC,SAAQ,SAAC5D,GACjC,IAAM6D,EAAOxC,EAAS2B,MAAMC,MAC1B,SAACa,GAAD,OAAiBA,EAAYtE,OAASQ,EAAQR,QAE5CqE,GAAQA,EAAK1B,UACfwB,EAAcX,MAAMe,KAClBF,EAAK1B,SACD0B,EAAK1B,SAAWnC,EAAQiC,SACxB4B,EAAKlB,MAAQ3C,EAAQiC,aAI/B9B,EAAW6C,MAAMtB,WAAaiC,EAAcX,MAAMgB,QAChD,SAACC,EAAWC,GAAZ,OAA0BD,EAAIC,KAEhC5E,QAAQC,IAAIY,EAAW6C,MAAMtB,aAGzBF,EAAoB,WACxBrB,EAAW6C,MAAM3B,SAAS0C,KAAK,CAC7BvE,KAAM,GACNyC,SAAU,KAIRH,EAAgB,SAACR,GACrBnB,EAAW6C,MAAM3B,SAAWlB,EAAW6C,MAAM3B,SAAS8C,QACpD,SAACnE,EAASoE,GAAV,OAAgBA,IAAM9C,MAIpB+C,EAAiB,yDAAG,6HAEHpF,EAAA,KAAgBqF,cAFb,OAEhBlF,EAFgB,OAGtBe,EAAW6C,MAAMtC,UAAYtB,EAAKmF,OAHZ,mDAKtBjF,QAAQC,IAAR,MALsB,yDAAH,qDASjBiF,EAAY,WAChBrE,EAAW6C,MAAMlD,IAAM,GACvBK,EAAW6C,MAAM5C,aAAe,GAChCD,EAAW6C,MAAMrC,KAAO,aACxBR,EAAW6C,MAAM5B,UAAY,GAC7BjB,EAAW6C,MAAM3B,SAAW,GAC5BlB,EAAW6C,MAAMtB,WAAa,GAG1BxB,EAAQ,yDAAG,8GAEbmE,IAFa,SAGPpF,EAAA,KAAgBkB,WAAWA,EAAW6C,OAH/B,OAIbwB,IAJa,mDAMblF,QAAQC,IAAR,MANa,yDAAH,qDA0Bd,OAhBA,eAAS,wCAAC,oHAEN8E,IAFM,SAGiBtE,EAAA,KAAemD,cAHhC,cAGN7B,EAAS2B,MAHH,OAINjB,EAAaiB,MAAQ3B,EAAS2B,MAAMG,KAClC,SAACnD,GAAD,OAA2BA,EAAQR,QAL/B,SAOkBiF,EAAA,KAAgBC,eAPlC,OAOAC,EAPA,OAQNpE,EAAayC,MAAQ2B,EAAUxB,KAC7B,SAACyB,GAAD,OAA6BA,EAASpF,QATlC,qDAYNF,QAAQC,IAAR,MAZM,2DAgBH,CACLY,aACA4B,eACAP,oBACAjB,eACAuB,gBACAJ,aACAL,WACAM,iBACAF,eACAvB,e,wECvHN,EAAOkD,OAASA,EAED,eASf,IAAS,EAAQ,aAAc,CAACyB,QAAA,KAAMtB,UAAA,KAAQC,SAAA,KAAOsB,QAAA,KAAMC,cAAA,KAAYC,QAAA,KAAMC,OAAA,OAAO,IAAS,EAAQ,aAAc,CAACC,aAAA,Q,gJCX/FT,E,gKAEjB,6HAE2B,OAAWvF,IAAIuF,EAAgBtF,SAF1D,cAEcC,EAFd,yBAGeA,EAAKC,QAAQD,MAH5B,mCAKQE,QAAQC,IAAR,MALR,yD,2IASA,WAAyB4F,GAAzB,gHAE2B,OAAWjG,IAAX,UAAkBuF,EAAgBtF,QAAlC,YAA6CgG,IAFxE,cAEc/F,EAFd,yBAGeA,EAAKC,QAAQD,MAH5B,mCAKQE,QAAQC,IAAR,MALR,yD,4IASA,WAAyBqF,GAAzB,gHAE2B,OAAWjF,KAAX,UAAmB8E,EAAgBtF,SAAWyF,GAFzE,cAEcxF,EAFd,yBAGeA,EAAKA,MAHpB,mCAKQE,QAAQC,IAAR,MALR,yD,+IASA,WAA4BqF,GAA5B,gHAE2B,OAAW/E,IAAX,UAAkB4E,EAAgBtF,QAAlC,YAA6CyF,EAAS9E,KAAO8E,GAFxF,cAEcxF,EAFd,yBAGeA,EAAKA,MAHpB,mCAKQE,QAAQC,IAAR,MALR,yD,iEA5BO,EAAAJ,QAAU","file":"js/chunk-03008b5c.77dce8f6.js","sourcesContent":["import { ApiService } from '@/services/ApiServices';\nimport InvoiceModel from './InvoiceModel';\nimport NewInvoiceModel from './NewInvoiceModel';\n\nexport default class AccountsService {\n  static baseUrl = 'accounts';\n\n  static async getAllInvoices() {\n    try {\n      const data = await ApiService.get(\n        `${AccountsService.baseUrl}/all-invoices`\n      );\n      return data.results.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static async getInvoice(name: string) {\n    try {\n      const data = await ApiService.get(\n        `${AccountsService.baseUrl}/invoices/${name}`\n      );\n      return data.results.data.filteredInvoice;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static async getInvoices() {\n    try {\n      const data = await ApiService.get(\n        `${AccountsService.baseUrl}/invoices`\n      );\n      return data.results.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static async newPaymentReceving(paymentReceving: InvoiceModel) {\n    try {\n      const data = await ApiService.post(\n        `${AccountsService.baseUrl}`,\n        paymentReceving\n      );\n      return data.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static async newInvoice(invoice: NewInvoiceModel) {\n    try {\n      const data = await ApiService.post(`${AccountsService.baseUrl}/create-invoice`, invoice);\n      return data.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static async updateBrand(paymentReceving: InvoiceModel) {\n    try {\n      const data = await ApiService.put(\n        `${AccountsService.baseUrl}/${paymentReceving._id}`,\n        paymentReceving\n      );\n      return data.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","import { ApiService } from \"@/services/ApiServices\";\nimport ProductModel from \"./ProductModel\";\n\nexport default class ProductService {\n  static baseUrl = \"products\";\n  static async getProducts() {\n    try {\n      const data = await ApiService.get(ProductService.baseUrl);\n      return data.results.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static async newProducts(product: ProductModel) {\n    try {\n      const data = await ApiService.post(`${ProductService.baseUrl}`, product);\n      return data.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  static async updateProduct(product: ProductModel) {\n    try {\n      const data = await ApiService.put(\n        `${ProductService.baseUrl}/${product._id}`,\n        product\n      );\n      return data.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n","<template>\n  <div>\n    <div class=\"row q-px-md\">\n      <div class=\"col-xs-12 col-sm-6\">\n        <h6 class=\"q-my-sm\">New Invoice</h6>\n      </div>\n    </div>\n    <q-form class=\"row full-width\" @submit=\"onSubmit\">\n      <div class=\"col col-xs-12 col-sm-6 q-my-sm q-px-md\">\n        <q-select\n          v-model=\"newInvoice.customerName\"\n          label=\"Select Customer\"\n          :options=\"customerList\"\n          filled\n        />\n      </div>\n      <div class=\"col col-xs-12 col-sm-6 q-my-sm q-px-md\">\n        <q-input\n          disable\n          v-model=\"newInvoice.invoiceNo\"\n          label=\"Invoice Number\"\n          filled\n        />\n      </div>\n      <div class=\"col col-xs-12 col-sm-6 q-my-sm q-px-md\">\n        <q-input filled v-model=\"newInvoice.date\" mask=\"date\" :rules=\"['date']\">\n          <template v-slot:append>\n            <q-icon name=\"event\" class=\"cursor-pointer\">\n              <q-popup-proxy\n                ref=\"qDateProxy\"\n                transition-show=\"scale\"\n                transition-hide=\"scale\"\n              >\n                <q-date v-model=\"newInvoice.date\">\n                  <div class=\"row items-center justify-end\">\n                    <q-btn v-close-popup label=\"Close\" color=\"primary\" flat />\n                  </div>\n                </q-date>\n              </q-popup-proxy>\n            </q-icon>\n          </template>\n        </q-input>\n      </div>\n      <div class=\"col col-xs-12 col-sm-6 q-my-sm q-px-md\">\n        <q-input v-model=\"newInvoice.reference\" label=\"Reference\" filled />\n      </div>\n      <div class=\"col col-xs-12 q-my-sm q-px-md\">\n        <div\n          class=\"q-my-sm\"\n          v-for=\"(product, index) in newInvoice.products\"\n          :key=\"index\"\n        >\n          <InvoiceProduct :invoice=\"product\" />\n        </div>\n      </div>\n      <div class=\"col-xs-12 q-px-md\">\n        <q-btn label=\"Add Another Product\" @click=\"addAnotherProduct\" />\n      </div>\n      <div v-if=\"isTotalValue\" class=\"col-xs-12 text-right q-my-sm q-px-xl\">\n        <h6 class=\"q-my-sm\">Rs: {{ newInvoice.totalValue }}</h6>\n      </div>\n      <div class=\"col-xs-12 text-right q-my-sm q-px-xl\">\n        <q-btn\n          @click=\"calculateTotal\"\n          label=\"Calculate Total Price\"\n          color=\"primary\"\n        />\n      </div>\n      <div class=\"col-xs-12 q-px-md text-right\">\n        <q-btn label=\"Create Invoice\" color=\"primary\" type=\"submit\" />\n      </div>\n    </q-form>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, defineComponent, onMounted } from 'vue';\nimport CustomerService from '../../customers/CustomerService';\nimport CustomerModel from '../../customers/CustomerModel';\nimport ProductModel from '../../products/ProductModel';\nimport ProductService from '../../products/ProductService';\nimport NewInvoiceModel from '../NewInvoiceModel';\nimport InvoiceProduct from './InvoiceProduct.vue';\nimport AccountsService from '../AccountsService';\n\nexport default defineComponent({\n  components: { InvoiceProduct },\n  setup() {\n    const newInvoice = ref<NewInvoiceModel>({\n      customerName: '',\n      invoiceNo: 0,\n      date: '2021-08-28',\n      reference: '',\n      products: [\n        {\n          name: '',\n          quantity: 1,\n        },\n      ],\n      totalValue: 0,\n    });\n    const totalValue = ref(0);\n    const productsList = ref<Array<string>>([]);\n    const products = ref<ProductModel[]>([]);\n    const customerList = ref([]);\n    const totalValueArr = ref<Array<number>>([]);\n    const isTotalValue = ref(false);\n\n    const calculateTotal = () => {\n      isTotalValue.value = true;\n      newInvoice.value.totalValue = 0;\n      totalValueArr.value = [];\n      newInvoice.value.products.forEach((product) => {\n        const prod = products.value.find(\n          (productFind) => productFind.name === product.name\n        );\n        if (prod && prod.discount) {\n          totalValueArr.value.push(\n            prod.discount\n              ? prod.discount * product.quantity\n              : prod.price * product.quantity\n          );\n        }\n      });\n      newInvoice.value.totalValue = totalValueArr.value.reduce(\n        (a: number, b: number) => a + b\n      );\n      console.log(newInvoice.value.totalValue);\n    };\n\n    const addAnotherProduct = () => {\n      newInvoice.value.products.push({\n        name: '',\n        quantity: 1,\n      });\n    };\n\n    const removeProduct = (index: number) => {\n      newInvoice.value.products = newInvoice.value.products.filter(\n        (product, i) => i !== index\n      );\n    };\n\n    const generateInvoiceNo = async () => {\n      try {\n        const data = await AccountsService.getInvoices();\n        newInvoice.value.invoiceNo = data.length;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const resetForm = () => {\n      newInvoice.value._id = '';\n      newInvoice.value.customerName = '';\n      newInvoice.value.date = '28-08-2021';\n      newInvoice.value.reference = '';\n      newInvoice.value.products = [];\n      newInvoice.value.totalValue = 0;\n    };\n\n    const onSubmit = async () => {\n      try {\n        generateInvoiceNo();\n        await AccountsService.newInvoice(newInvoice.value);\n        resetForm();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    onMounted(async () => {\n      try {\n        generateInvoiceNo();\n        products.value = await ProductService.getProducts();\n        productsList.value = products.value.map(\n          (product: ProductModel) => product.name\n        );\n        const customers = await CustomerService.getCustomers();\n        customerList.value = customers.map(\n          (customer: CustomerModel) => customer.name\n        );\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    return {\n      newInvoice,\n      productsList,\n      addAnotherProduct,\n      customerList,\n      removeProduct,\n      totalValue,\n      products,\n      calculateTotal,\n      isTotalValue,\n      onSubmit,\n    };\n  },\n});\n</script>\n","<template>\n  <div>\n    <q-card class=\"q-my-sm\">\n      <q-card-section>\n        <div class=\"row full-width\">\n          <div class=\"col-xs-12 col-sm-6\">\n            <p class=\"text-body2\">\n              {{\n                inputValue.name\n                  ? `Selected Product: ${inputValue.name}`\n                  : 'Select Product'\n              }}\n            </p>\n          </div>\n          <div class=\"col-xs-12 col-sm-6 text-right\">\n            <p class=\"text-body2 cursor-pointer\" @click=\"removeProduct(index)\">\n              X\n            </p>\n          </div>\n        </div>\n        <div class=\"row full-width\">\n          <div class=\"col-xs-12 col-sm-3 q-my-sm q-px-md\">\n            <q-select\n              label=\"Select Product\"\n              v-model=\"inputValue.name\"\n              :options=\"productsList\"\n              @input:invoice=\"$emit('input', invoice)\"\n            />\n          </div>\n          <div class=\"col-xs-12 col-sm-3 q-my-sm q-px-md\">\n            <q-input\n              type=\"number\"\n              label=\"Quantity\"\n              v-model.number=\"inputValue.quantity\"\n              @input=\"$emit('input', invoice)\"\n            />\n          </div>\n          <div class=\"col-xs-12 col-sm-3 q-my-sm q-px-md q-my-auto\">\n            Discount\n            <p class=\"q-my-auto\">\n              {{\n                productData.discount\n                  ? productData.discount * inputValue.quantity\n                  : productData.price * inputValue.quantity\n              }}\n            </p>\n          </div>\n          <div class=\"col-xs-12 col-sm-3 q-my-sm q-px-md\">\n            <q-input\n              disable\n              type=\"number\"\n              label=\"Discount\"\n              v-model.number=\"productData.discount\"\n            />\n          </div>\n        </div>\n      </q-card-section>\n    </q-card>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  PropType,\n  watch,\n  ref,\n  onMounted,\n  computed,\n} from 'vue';\nimport ProductService from '../../products/ProductService';\nimport ProductModel from '../../products/ProductModel';\n\nimport NewProductModel from './ProductInvoiceModel';\n\nexport default defineComponent({\n  props: {\n    invoice: {\n      type: Object as PropType<NewProductModel>,\n    },\n  },\n  setup(props, context) {\n    const products = ref<ProductModel[]>([]);\n    const productsList = ref<Array<string>>([]);\n    const productData = ref<any>({\n      sku: '',\n      name: '',\n      brand: '',\n      category: '',\n      price: 0,\n      discount: 0,\n      costPrice: 0,\n      quantity: 0,\n    });\n\n    const inputValue = computed({\n      get: () => props.invoice,\n      set: (val) => context.emit('update:modelValue', val),\n    });\n\n    watch(\n      () => inputValue.value!.name,\n      () =>\n        (productData.value = products.value.find(\n          (product: NewProductModel) => product.name === inputValue.value!.name\n        ))\n    );\n\n    onMounted(async () => {\n      try {\n        products.value = await ProductService.getProducts();\n        productsList.value = products.value.map((product) => product.name);\n        console.log(productsList.value);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    return {\n      productData,\n      productsList,\n      inputValue,\n    };\n  },\n});\n</script>\n\n<style></style>\n","\nimport {\n  defineComponent,\n  PropType,\n  watch,\n  ref,\n  onMounted,\n  computed,\n} from 'vue';\nimport ProductService from '../../products/ProductService';\nimport ProductModel from '../../products/ProductModel';\n\nimport NewProductModel from './ProductInvoiceModel';\n\nexport default defineComponent({\n  props: {\n    invoice: {\n      type: Object as PropType<NewProductModel>,\n    },\n  },\n  setup(props, context) {\n    const products = ref<ProductModel[]>([]);\n    const productsList = ref<Array<string>>([]);\n    const productData = ref<any>({\n      sku: '',\n      name: '',\n      brand: '',\n      category: '',\n      price: 0,\n      discount: 0,\n      costPrice: 0,\n      quantity: 0,\n    });\n\n    const inputValue = computed({\n      get: () => props.invoice,\n      set: (val) => context.emit('update:modelValue', val),\n    });\n\n    watch(\n      () => inputValue.value!.name,\n      () =>\n        (productData.value = products.value.find(\n          (product: NewProductModel) => product.name === inputValue.value!.name\n        ))\n    );\n\n    onMounted(async () => {\n      try {\n        products.value = await ProductService.getProducts();\n        productsList.value = products.value.map((product) => product.name);\n        console.log(productsList.value);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    return {\n      productData,\n      productsList,\n      inputValue,\n    };\n  },\n});\n","import { render } from \"./InvoiceProduct.vue?vue&type=template&id=16511792\"\nimport script from \"./InvoiceProduct.vue?vue&type=script&lang=ts\"\nexport * from \"./InvoiceProduct.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script\nimport QCard from 'quasar/src/components/card/QCard.js';\nimport QCardSection from 'quasar/src/components/card/QCardSection.js';\nimport QSelect from 'quasar/src/components/select/QSelect.js';\nimport QInput from 'quasar/src/components/input/QInput.js';\nimport qInstall from \"../../../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QCard,QCardSection,QSelect,QInput});\n","\nimport { ref, defineComponent, onMounted } from 'vue';\nimport CustomerService from '../../customers/CustomerService';\nimport CustomerModel from '../../customers/CustomerModel';\nimport ProductModel from '../../products/ProductModel';\nimport ProductService from '../../products/ProductService';\nimport NewInvoiceModel from '../NewInvoiceModel';\nimport InvoiceProduct from './InvoiceProduct.vue';\nimport AccountsService from '../AccountsService';\n\nexport default defineComponent({\n  components: { InvoiceProduct },\n  setup() {\n    const newInvoice = ref<NewInvoiceModel>({\n      customerName: '',\n      invoiceNo: 0,\n      date: '2021-08-28',\n      reference: '',\n      products: [\n        {\n          name: '',\n          quantity: 1,\n        },\n      ],\n      totalValue: 0,\n    });\n    const totalValue = ref(0);\n    const productsList = ref<Array<string>>([]);\n    const products = ref<ProductModel[]>([]);\n    const customerList = ref([]);\n    const totalValueArr = ref<Array<number>>([]);\n    const isTotalValue = ref(false);\n\n    const calculateTotal = () => {\n      isTotalValue.value = true;\n      newInvoice.value.totalValue = 0;\n      totalValueArr.value = [];\n      newInvoice.value.products.forEach((product) => {\n        const prod = products.value.find(\n          (productFind) => productFind.name === product.name\n        );\n        if (prod && prod.discount) {\n          totalValueArr.value.push(\n            prod.discount\n              ? prod.discount * product.quantity\n              : prod.price * product.quantity\n          );\n        }\n      });\n      newInvoice.value.totalValue = totalValueArr.value.reduce(\n        (a: number, b: number) => a + b\n      );\n      console.log(newInvoice.value.totalValue);\n    };\n\n    const addAnotherProduct = () => {\n      newInvoice.value.products.push({\n        name: '',\n        quantity: 1,\n      });\n    };\n\n    const removeProduct = (index: number) => {\n      newInvoice.value.products = newInvoice.value.products.filter(\n        (product, i) => i !== index\n      );\n    };\n\n    const generateInvoiceNo = async () => {\n      try {\n        const data = await AccountsService.getInvoices();\n        newInvoice.value.invoiceNo = data.length;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const resetForm = () => {\n      newInvoice.value._id = '';\n      newInvoice.value.customerName = '';\n      newInvoice.value.date = '28-08-2021';\n      newInvoice.value.reference = '';\n      newInvoice.value.products = [];\n      newInvoice.value.totalValue = 0;\n    };\n\n    const onSubmit = async () => {\n      try {\n        generateInvoiceNo();\n        await AccountsService.newInvoice(newInvoice.value);\n        resetForm();\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    onMounted(async () => {\n      try {\n        generateInvoiceNo();\n        products.value = await ProductService.getProducts();\n        productsList.value = products.value.map(\n          (product: ProductModel) => product.name\n        );\n        const customers = await CustomerService.getCustomers();\n        customerList.value = customers.map(\n          (customer: CustomerModel) => customer.name\n        );\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    return {\n      newInvoice,\n      productsList,\n      addAnotherProduct,\n      customerList,\n      removeProduct,\n      totalValue,\n      products,\n      calculateTotal,\n      isTotalValue,\n      onSubmit,\n    };\n  },\n});\n","import { render } from \"./newInvoice.vue?vue&type=template&id=3b09441c\"\nimport script from \"./newInvoice.vue?vue&type=script&lang=ts\"\nexport * from \"./newInvoice.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script\nimport QForm from 'quasar/src/components/form/QForm.js';\nimport QSelect from 'quasar/src/components/select/QSelect.js';\nimport QInput from 'quasar/src/components/input/QInput.js';\nimport QIcon from 'quasar/src/components/icon/QIcon.js';\nimport QPopupProxy from 'quasar/src/components/popup-proxy/QPopupProxy.js';\nimport QDate from 'quasar/src/components/date/QDate.js';\nimport QBtn from 'quasar/src/components/btn/QBtn.js';import ClosePopup from 'quasar/src/directives/ClosePopup.js';\nimport qInstall from \"../../../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QForm,QSelect,QInput,QIcon,QPopupProxy,QDate,QBtn});qInstall(script, 'directives', {ClosePopup});\n","import { ApiService } from \"@/services/ApiServices\";\nimport CustomerModel from './CustomerModel';\n\nexport default class CustomerService {\n    static baseUrl = \"customers\";\n    static async getCustomers() {\n        try {\n            const data = await ApiService.get(CustomerService.baseUrl);\n            return data.results.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    static async getCustomer(id: string) {\n        try {\n            const data = await ApiService.get(`${CustomerService.baseUrl}/${id}`);\n            return data.results.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    static async newCustomer(customer: CustomerModel) {\n        try {\n            const data = await ApiService.post(`${CustomerService.baseUrl}`, customer);\n            return data.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    static async updateCustomer(customer: CustomerModel) {\n        try {\n            const data = await ApiService.put(`${CustomerService.baseUrl}/${customer._id}`, customer);\n            return data.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n"],"sourceRoot":""}