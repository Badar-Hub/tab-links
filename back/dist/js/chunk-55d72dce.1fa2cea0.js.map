{"version":3,"sources":["webpack:///./src/domain/accounts/customer/CustomerInvoices.vue","webpack:///./src/domain/accounts/customer/CustomerInvoices.vue?e393","webpack:///./src/domain/accounts/customer/CustomerInvoices.vue?a828","webpack:///./src/domain/customers/CustomerService.ts"],"names":["class","data","tableDef","isLoading","actions","props","to","row","name","icon","unelevated","components","Table","setup","customers","PagedResultModel","TableModel","getInvoices","value","CustomerService","getCustomers","results","console","log","changeRoute","render","QBtn","get","baseUrl","id","customer","post","put","_id"],"mappings":"sJACOA,MAAM,qB,wGAAX,eAMM,MANN,EAMM,CALJ,eAIQ,GAJAC,KAAM,EAAAA,KAAOC,SAAU,EAAAA,SAAWC,UAAW,EAAAA,W,CACtCC,QAAO,gBACd,gBADkBC,EAClB,EADkBA,MAClB,MADuB,CACvB,eAAyF,GAAjFC,GAAE,sCAAiCD,EAAME,IAAIC,MAAQC,KAAK,UAAUC,WAAA,I,qJCKzE,iBAAgB,CAC7BC,WAAY,CAAEC,QAAA,MACdC,MAF6B,WAG3B,IAAMV,EAAY,gBAAI,GAChBW,EAAY,eAAqB,IACjCb,EAAO,eACX,IAAIc,EAAA,MAGAb,EAAW,eACf,IAAIc,EAAA,KAAW,CACb,IAAI,OAAO,OAAQ,QAAQ,GAC3B,IAAI,OAAO,QAAS,SACpB,IAAI,OAAO,UAAW,WAAW,GACjC,IAAI,OAAO,UAAW,WAAW,GACjC,IAAI,OAAO,UAAW,WAAW,GAAO,MAItCC,EAAW,yDAAG,8GAEhBd,EAAUe,OAAQ,EAFF,SAGQC,EAAA,KAAgBC,eAHxB,OAGhBN,EAAUI,MAHM,OAIhBjB,EAAKiB,MAAMG,QAAUP,EAAUI,MAC/Bf,EAAUe,OAAQ,EALF,mDAOhBI,QAAQC,IAAR,MAPgB,yDAAH,qDAWXC,EAAc,SAACvB,GACnBqB,QAAQC,IAAItB,IAQd,OAJA,gBAAU,WACRgB,OAGK,CACLhB,OACAC,WACAC,YACAqB,cACAP,kB,iCClDN,EAAOQ,OAASA,EAED,eAGf,IAAS,EAAQ,aAAc,CAACC,OAAA,Q,gJCLXP,E,gKAEjB,6HAE2B,OAAWQ,IAAIR,EAAgBS,SAF1D,cAEc3B,EAFd,yBAGeA,EAAKoB,QAAQpB,MAH5B,mCAKQqB,QAAQC,IAAR,MALR,yD,2IASA,WAAyBM,GAAzB,gHAE2B,OAAWF,IAAX,UAAkBR,EAAgBS,QAAlC,YAA6CC,IAFxE,cAEc5B,EAFd,yBAGeA,EAAKoB,QAAQpB,MAH5B,mCAKQqB,QAAQC,IAAR,MALR,yD,4IASA,WAAyBO,GAAzB,gHAE2B,OAAWC,KAAX,UAAmBZ,EAAgBS,SAAWE,GAFzE,cAEc7B,EAFd,yBAGeA,EAAKA,MAHpB,mCAKQqB,QAAQC,IAAR,MALR,yD,+IASA,WAA4BO,GAA5B,gHAE2B,OAAWE,IAAX,UAAkBb,EAAgBS,QAAlC,YAA6CE,EAASG,KAAOH,GAFxF,cAEc7B,EAFd,yBAGeA,EAAKA,MAHpB,mCAKQqB,QAAQC,IAAR,MALR,yD,iEA5BO,EAAAK,QAAU","file":"js/chunk-55d72dce.1fa2cea0.js","sourcesContent":["<template>\n  <div class=\"customer-invoices\">\n    <Table :data=\"data\" :tableDef=\"tableDef\" :isLoading=\"isLoading\">\n        <template #actions=\"{ props }\">\n            <q-btn :to=\"`/accounting/customer-ledger/${props.row.name}`\" icon=\"receipt\" unelevated />\n        </template>\n    </Table>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onMounted, ref } from 'vue';\nimport Column from '../../../components/General/Table/ColumnModel';\nimport Table from '../../../components/General/Table/Table.vue';\nimport TableModel from '../../../components/General/Table/TableModel';\nimport PagedResultModel from '../../../interfaces/PagedResultModel';\nimport CustomerModel from '../../customers/CustomerModel';\nimport CustomerService from '../../customers/CustomerService';\n\nexport default defineComponent({\n  components: { Table },\n  setup() {\n    const isLoading = ref(true);\n    const customers = ref<CustomerModel[]>([]);\n    const data = ref<PagedResultModel<CustomerModel>>(\n      new PagedResultModel<CustomerModel>()\n    );\n\n    const tableDef = ref<TableModel>(\n      new TableModel([\n        new Column('name', 'Name', true),\n        new Column('phone', 'Phone'),\n        new Column('address', 'Address', true),\n        new Column('balance', 'Balance', true),\n        new Column('actions', 'Actions', false, true),\n      ])\n    );\n\n    const getInvoices = async () => {\n      try {\n        isLoading.value = true;\n        customers.value = await CustomerService.getCustomers();\n        data.value.results = customers.value;\n        isLoading.value = false;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const changeRoute = (data: any) => {\n      console.log(data);\n      \n    }\n\n    onMounted(() => {\n      getInvoices();\n    });\n\n    return {\n      data,\n      tableDef,\n      isLoading,\n      changeRoute,\n      getInvoices,\n    };\n  },\n});\n</script>\n\n<style></style>\n","\nimport { defineComponent, onMounted, ref } from 'vue';\nimport Column from '../../../components/General/Table/ColumnModel';\nimport Table from '../../../components/General/Table/Table.vue';\nimport TableModel from '../../../components/General/Table/TableModel';\nimport PagedResultModel from '../../../interfaces/PagedResultModel';\nimport CustomerModel from '../../customers/CustomerModel';\nimport CustomerService from '../../customers/CustomerService';\n\nexport default defineComponent({\n  components: { Table },\n  setup() {\n    const isLoading = ref(true);\n    const customers = ref<CustomerModel[]>([]);\n    const data = ref<PagedResultModel<CustomerModel>>(\n      new PagedResultModel<CustomerModel>()\n    );\n\n    const tableDef = ref<TableModel>(\n      new TableModel([\n        new Column('name', 'Name', true),\n        new Column('phone', 'Phone'),\n        new Column('address', 'Address', true),\n        new Column('balance', 'Balance', true),\n        new Column('actions', 'Actions', false, true),\n      ])\n    );\n\n    const getInvoices = async () => {\n      try {\n        isLoading.value = true;\n        customers.value = await CustomerService.getCustomers();\n        data.value.results = customers.value;\n        isLoading.value = false;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const changeRoute = (data: any) => {\n      console.log(data);\n      \n    }\n\n    onMounted(() => {\n      getInvoices();\n    });\n\n    return {\n      data,\n      tableDef,\n      isLoading,\n      changeRoute,\n      getInvoices,\n    };\n  },\n});\n","import { render } from \"./CustomerInvoices.vue?vue&type=template&id=29efdfb6\"\nimport script from \"./CustomerInvoices.vue?vue&type=script&lang=ts\"\nexport * from \"./CustomerInvoices.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script\nimport QBtn from 'quasar/src/components/btn/QBtn.js';\nimport qInstall from \"../../../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QBtn});\n","import { ApiService } from \"@/services/ApiServices\";\nimport CustomerModel from './CustomerModel';\n\nexport default class CustomerService {\n    static baseUrl = \"customers\";\n    static async getCustomers() {\n        try {\n            const data = await ApiService.get(CustomerService.baseUrl);\n            return data.results.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    static async getCustomer(id: string) {\n        try {\n            const data = await ApiService.get(`${CustomerService.baseUrl}/${id}`);\n            return data.results.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    static async newCustomer(customer: CustomerModel) {\n        try {\n            const data = await ApiService.post(`${CustomerService.baseUrl}`, customer);\n            return data.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    static async updateCustomer(customer: CustomerModel) {\n        try {\n            const data = await ApiService.put(`${CustomerService.baseUrl}/${customer._id}`, customer);\n            return data.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n"],"sourceRoot":""}